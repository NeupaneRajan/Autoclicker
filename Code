# -*- coding: utf-8 -*-
"""
Created on Mon Sep 16 

@author: Rajan
"""
import time
import ctypes

import ctypes.wintypes
import pyautogui
import PIL
import numpy as np

flowwindow = ctypes.windll.user32.FindWindowW(None, "KEWA Process Control v2.7.1")
scriptwindow = ctypes.windll.user32.FindWindowW(None, "KEWA UDB Control v2.7.1")
ctypes.windll.user32.ShowWindow(flowwindow, 3)

exposure = 1.0
gain = 1.0
screenWidth, screenHeight = pyautogui.size()

#pyautogui.moveTo(275,345) #Location of gain text box
#pyautogui.moveTo(275,325) #Location of exposure text box

pyautogui.moveTo(250,50) # click "Aquisition"
time.sleep(0.05)
pyautogui.click()
time.sleep(1)

numMillisecImages = 0
   
exposeMillisecs = np.arange(0.0, 1000.0, 50)
for exposure in exposeMillisecs:
    if exposure < 1.0:
        time.sleep(0.001)
    elif exposure < 1000.0:
        numMillisecImages += 1
        pyautogui.moveTo(280,332)
        time.sleep(0.25)
        pyautogui.click()
        time.sleep(0.1)
        pyautogui.click()
        pyautogui.write("%s" % exposure, interval=0.1)
        pyautogui.press('enter')
        time.sleep(2*(exposure/1000.0)+1)
        pyautogui.moveTo(700,980)
        time.sleep(0.1)
        pyautogui.click() # click "Capture Image"
        time.sleep(2*(exposure/1000.0)+ 1.1)
        

pyautogui.moveTo(80,980)
time.sleep(0.1)
pyautogui.click()
time.sleep(1)
'''
pyautogui.moveTo(280,332)
time.sleep(0.1)
pyautogui.click()
time.sleep(0.1)
pyautogui.click()
pyautogui.write('0.1')
pyautogui.press('enter')
time.sleep(2)
pyautogui.click()
pyautogui.write("1000")
pyautogui.press('enter')
time.sleep(6)

time.sleep(0.5)
pyautogui.doubleClick()
pyautogui.write("1")
pyautogui.press('enter')
time.sleep(6)
'''
'''
pyautogui.moveTo(700,900)
time.sleep(0.1)
pyautogui.click()
pyautogui.moveTo(280,332)
time.sleep(0.1)
pyautogui.click()
time.sleep(0.1)
pyautogui.click()
pyautogui.write("1")
pyautogui.press('enter')

'''
numSecImages = 0
exposeSecs = np.arange(1,3.05,0.05)
for exposure in exposeSecs:
    numSecImages += 1
    pyautogui.moveTo(280,332)
    time.sleep(0.3)
    pyautogui.click()
    time.sleep(0.3)
    pyautogui.click()
    pyautogui.write("%s" % exposure, interval = 0.2)
    pyautogui.press('enter')
    time.sleep(3)
    pyautogui.moveTo(700,980) # click "Capture Image"
    time.sleep(0.2)
    pyautogui.click()
    time.sleep(2.5)
    

pyautogui.moveTo(100,50)  # click "Open projects"
time.sleep(0.1)
pyautogui.click()
time.sleep(1)


for i in range(1,numMillisecImages+numSecImages+1):
    pyautogui.moveTo(67,165+(19.5*(i-1))) # i starts at one, so first iteration does not add to move
    pyautogui.click() 
    time.sleep(0.5)
    pyautogui.doubleClick()
    time.sleep(0.1)
    
    if i <= numMillisecImages:
        # Sample number is givven by i, starting at 1
        # 1st exposure value is skipped (0th element), so i=1 starts at the 1st element, aka the first image
        pyautogui.write(str(exposeMillisecs[i]), interval = 0.05)
    else:
        pyautogui.write(str((exposeSecs[i-numMillisecImages-1])*1000), interval = 0.05)
        pyautogui.press('enter')
        time.sleep(0.1)


#raise pyautogui.FailSafeException

'''python
    >>> import pyautogui
    >>> screenWidth, screenHeight = pyautogui.size() # Returns two integers, the width and height of the screen. (The primary monitor, in multi-monitor setups.)
    >>> currentMouseX, currentMouseY = pyautogui.position() # Retursn two integes, the x and y of the mouse cursor's current position.
    >>> pyautogui.moveTo(100, 150) # Move the mouse to the x, y coordinates 100, 150.
    >>> pyautogui.click() # Click the mouse at its current location.
    >>> pyautogui.click(200, 220) # Click the mouse at the x, y coordinates 200, 220.
    >>> pyautogui.move(None, 10)  # Move mouse 10 pixels down, that is, move the mouse relative to its current position.
    >>> pyautogui.doubleClick() # Double click the mouse at the
    >>> pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.tweens.easeInOutQuad) # Use tweening/easing function to move mouse over 2 seconds.
    >>> pyautogui.write('Hello world!', interval=0.25)  # Type with quarter-second pause in between each key.
    >>> pyautogui.press('esc') # Simulate pressing the Escape key.
    >>> pyautogui.keyDown('shift')
    >>> pyautogui.write(['left', 'left', 'left', 'left', 'left', 'left'])
    >>> pyautogui.keyUp('shift')
    >>> pyautogui.hotkey('ctrl', 'c')
'''
'''
Captureloc = pyautogui.locateOnScreen('captureimage.png') # returns (left, top, width, height) of matching region
Capturex, Capturey = pyautogui.center(Captureloc)
OpenProj = pyautogui.locateOnScreen('C:/Users/brian/Desktop/LeicaAutoClicker/OpenProjects.png') # returns (left, top, width, height) of matching region
OpenProjx, OpenProjy = pyautogui.center(OpenProj) # returns center of button
'''
'''
# This code is meant to find a button by matching the image
# This may not work for text fields that change
Gainloc = pyautogui.locateOnScreen('C:/Users/brian/Desktop/LeicaAutoClicker/GainText.png') # returns (left, top, width, height) of matching region
#Gainx, Gainy = pyautogui.center(Gainloc) # returns center of button
#pyautogui.click(Gainx, Gainy)  # clicks the center of where the button was found
print(Gainloc)
Gainx = Gainloc[0]+Gainloc[2]*0.9
Gainy = Gainloc[1]+Gainloc[3]*0.5
Captureloc = pyautogui.locateOnScreen('C:/Users/brian/Desktop/LeicaAutoClicker/captureimage.png') # returns (left, top, width, height) of matching region
#Capturex, Capturey = pyautogui.center(Captureloc)
#pyautogui.click(Capturex, Capturey) 
print(Captureloc)
Capturex = Captureloc[0]+Captureloc[2]*0.9
Capturey = Capture[1]+Captureloc[3]*0.5
''' 
'''
KewaX = 527
KewaY = 52
		
stopprocessX = 55
stopprocessY = 790

PLCtimeoutX = 691
PLCtimeoutY = 505
		
pyautogui.moveTo( stopprocessX, stopprocessY)
time.sleep(1)
pyautogui.click()
time.sleep(1)

ctypes.windll.user32.ShowWindow(flowwindow, 1)
ctypes.windll.user32.ShowWindow(scriptwindow, 2)
ctypes.windll.user32.ShowWindow(scriptwindow, 1)		
		
time.sleep(2)
pyautogui.moveTo( KewaX, KewaY) #move mouse to run next file
time.sleep(1)
pyautogui.click()
time.sleep(1)
pyautogui.moveTo( 100, 100) #move out of the way
'''
  
  
{"mode":"full","isActive":false}
